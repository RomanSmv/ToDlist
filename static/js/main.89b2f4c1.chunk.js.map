{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","Utils/Erroe-Utils.ts","features/Login/auth-reducer.ts","state/app-reducer.tsx","ErrorSneckbar/Errorsneckbar.tsx","state/todolists-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","TodolistsList.tsx","features/Login/login.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","tasksAPI","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addTask","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","updateTaskTC","domainModel","getState","task","tasks","find","id","serverModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskSAC","catch","warn","Task","onChangeStatusHandler","useCallback","newStatusValue","checked","Completed","InProgress","onChangeTitleHandler","removeTask","removeTaskAC","key","className","Checkbox","Delete","Todolist","demo","useEffect","todolist","items","setTasksAC","changeTodoListTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","allTodolistTasks","tasksForTodolist","filter","t","New","thunk","addTaskAC","item","addTaskTC","onRemoveToDoList","entityStatus","map","Button","TodolistsList","todoLists","todolists","auth","todoListId","removeToDoListAC","changeTitleToDoListAC","changeTitleTodolistTC","changeFilterToDoListAC","addTodoList","addTodolistTC","Grid","container","spacing","tl","Paper","style","padding","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","name","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","App1","rootReducer","combineReducers","newTodolist","todolistTitle","todoListFilter","todoList","copyState","filteredTasks","stateCopy","newTasks","copystate","newTasksArray","forEach","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89b2f4c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {UpDateAPITaskType} from \"../state/tasks-reducer\";\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        // Не забываем заменить API-KEY на собственный\r\n        'API-KEY': '2c8164cb-8938-4b6c-9f69-8a7ff54d8100'\r\n    }\r\n})\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n        return promise\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n    createTodolist( title: string) {\r\n        const promise = instance.post<ResponseType<{item: TodolistTypeAPI}>>(`todo-lists`, {title: title})\r\n        return promise\r\n    },\r\n    getTodolist() {\r\n        const promise = instance.get<Array<TodolistTypeAPI>>(`todo-lists`)\r\n        return promise\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponce>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        const promise = instance.post<ResponseType<{item: TasksTypeAPI }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, )\r\n        return promise\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpDateAPITaskType) {\r\n        const promise = instance.put<ResponseType<TasksTypeAPI>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n        return promise\r\n    },\r\n\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n        return promise\r\n    },\r\n    me() {\r\n        const promise = instance.get<ResponseType<{ id: number, email:string, login: string  }>>('auth/me')\r\n        return promise\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n        return promise\r\n    },\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\nexport type TodolistTypeAPI= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype GetTasksResponce = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TasksTypeAPI[]\r\n}\r\nexport type TasksTypeAPI = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate:string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low= 0,\r\n    Middle = 1,\r\n    High = 2 ,\r\n    Urgently= 3,\r\n    Later = 4\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\r\n","import {Dispatch} from 'redux'\r\n\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../Utils/Erroe-Utils\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../state/app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n\r\n\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n\r\n\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst initialState: RequestStatusType = {\r\n    // происходит ли взаимодействие с сервером сейчас\r\n    status: 'loading',\r\n    //если ошибка какая-то глобальная произайдет - мы щапишем текст ошибки сюда\r\n    error: \" error message\",\r\n    // когда приложение проинициализировалось (проверили юзера, получили настройки и т.д.)\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: ValuesStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        dispatch(setAppInitializedAC(true))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n    })\r\n\r\n}\r\n\r\n\r\n//происходит ли сейчас взаимодействие с сервером\r\nexport type ValuesStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestStatusType = {\r\n    status: ValuesStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","\r\nimport React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n//    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootState, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n  //      setOpen(false)\r\n    }\r\nconst isOpen = error !== null\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                This is a success message!\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import {todolistAPI, TodolistTypeAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, ValuesStatusType} from \"./app-reducer\";\r\nimport {FilterValuesType} from \"../TodolistsList\";\r\nimport {handleServerNetworkError} from \"../Utils/Erroe-Utils\";\r\n\r\n\r\nexport type RemoveToDoListType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string,\r\n\r\n}\r\n/*export type AddToDoListType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolistId: string\r\n    title: string,\r\n\r\n}*///мы создаем тип автоматически ReturnType<typeof addToDoListAC>\r\nexport type ChangeTitleToDoListType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string,\r\n    title: string,\r\n\r\n}\r\nexport type ChangeFilterToDoListType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS',\r\n    todolists: Array<TodolistTypeAPI>\r\n}\r\nexport type AddToDoListType = ReturnType<typeof addToDoListAC>\r\nexport type TodolistEntityStatusType =ReturnType<typeof changeEntityStatusToDoListAC>\r\ntype ActionType =\r\n    RemoveToDoListType\r\n    | AddToDoListType\r\n    | ChangeTitleToDoListType\r\n    | ChangeFilterToDoListType\r\n    | SetTodolistsActionType\r\n    | TodolistEntityStatusType\r\n\r\nconst initialState: Array<ToDoListBusinessType> = []\r\nexport type ToDoListBusinessType = TodolistTypeAPI & {\r\n    filter: FilterValuesType,\r\n    entityStatus: ValuesStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<ToDoListBusinessType> = initialState, action: ActionType): Array<ToDoListBusinessType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST': {\r\n            const newTodolist: ToDoListBusinessType = {...action.todolist, filter: \"all\", entityStatus: \"idle\"}\r\n            return (\r\n                [\r\n                    newTodolist,\r\n                    ...state\r\n\r\n                ]\r\n\r\n            )\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n\r\n            let todolistTitle = state.find(t => t.id === action.id);\r\n\r\n            if (todolistTitle) {\r\n                todolistTitle.title = action.title;\r\n\r\n            }\r\n            return [...state]\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todoListFilter = state.find(tl => tl.id === action.id);\r\n            if (todoListFilter) {\r\n                todoListFilter.filter = action.filter;\r\n            }\r\n            return [...state]\r\n\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            let todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.entityStatus = action.status;\r\n            }\r\n            return [...state]\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(todolist => ({\r\n                ...todolist,\r\n                filter: 'all',\r\n                entityStatus: \"idle\"\r\n            }))\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeToDoListAC = (todolistId: string): RemoveToDoListType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addToDoListAC = (todolist: TodolistTypeAPI) => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const changeTitleToDoListAC = (id: string, title: string): ChangeTitleToDoListType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\nexport const changeFilterToDoListAC = (id: string, filter: FilterValuesType): ChangeFilterToDoListType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const changeEntityStatusToDoListAC = (id: string, status: ValuesStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id: id, status: status} as const\r\n}\r\n//ne ponimat zachem lists peredavat\r\nexport const setToDoListsAC = (todolists: Array<TodolistTypeAPI>): SetTodolistsActionType => {\r\n    return {type: \"SET-TODOLISTS\", todolists: todolists}\r\n}\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setToDoListsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //показать полоску загрузки\r\n        dispatch(setAppStatusAC('loading'))\r\n            //задизэйблить тудулист\r\n        dispatch(changeEntityStatusToDoListAC(todolistId,'loading'))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n\r\n                dispatch(removeToDoListAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTitleTodolistTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n\r\n                dispatch(changeTitleToDoListAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, itemId?: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log('called App')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       disabled={disabled}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n            />\r\n\r\n            <IconButton color=\"primary\" onClick={addTask} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        debugger\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant=\"outlined\" value={title} onChange={onChangeTitleHandler} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n\r\n})\r\n\r\n","import {AddToDoListType, RemoveToDoListType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TasksTypeAPI} from \"../api/todolist-api\";\r\nimport {AppRootState} from \"./store\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Erroe-Utils\";\r\n\r\n\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string,\r\n    taskId: string,\r\n\r\n}\r\nexport type addTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TasksTypeAPI\r\n}\r\n\r\nexport type changeTaskStatusActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string,\r\n    taskId: string,\r\n    model: UpDateAPITaskType\r\n}\r\nexport type updateTaskActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string,\r\n    taskId: string,\r\n    title: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TasksTypeAPI>\r\n    todolistId: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksTypeAPI>\r\n}\r\n\r\n\r\ntype ActionType = removeTaskActionType | addTaskActionType | changeTaskStatusActionType | updateTaskActionType\r\n    | AddToDoListType | RemoveToDoListType | SetTodolistsActionType | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const copyState = {...state}\r\n            const tasks = state[action.todolistId]\r\n            debugger\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            copyState[action.todolistId] = filteredTasks\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'UPDATE-TASK': {\r\n            let copystate = {...state}\r\n            let tasks = state[action.todolistId]\r\n            let newTasksArray = tasks.map(task => {\r\n\r\n                return task.id === action.taskId ? {...task, ...action.model} : task\r\n            })\r\n            copystate[action.todolistId] = newTasksArray\r\n            return copystate;\r\n            /*return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId ? {...task, ...action.model} : task)\r\n            }*/\r\n        }\r\n        /* case 'CHANGE-TASK-TITLE': {\r\n             const copyState = {...state}\r\n\r\n             let title = state[action.todolistId];\r\n             let changeTitle = title.find(t => t.id === action.taskId);\r\n\r\n             if (changeTitle) {\r\n                 changeTitle.title = action.title;\r\n             }\r\n\r\n             return copyState;\r\n         }*/\r\n        case \"ADD-TODOLIST\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolist.id] = []\r\n            return copyState\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (task: TasksTypeAPI): addTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskSAC = (taskId: string, model: UpDateAPITaskType, todolistId: string): changeTaskStatusActionType => {\r\n    return {type: 'UPDATE-TASK', todolistId, model, taskId}\r\n}\r\n/*export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): updateTaskActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', todolistId, title, taskId}\r\n}*/\r\nexport const setTasksAC = (tasks: Array<TasksTypeAPI>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //делаем крутилку перед запросом\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasksAC(tasks, todolistId))\r\n                //убираем крутилку\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const deleteTasksTC = (todolistId: string, taskId: string,) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.deleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                const action = removeTaskAC(todolistId, taskId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    const action = addTaskAC(task)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n/*\r\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootState) => {\r\n        // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(task => task.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpDateTaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: status\r\n        }\r\n        tasksAPI.updateTask(todolistId, taskId, model)\r\n            .then((res) => {\r\n\r\n                const action = updateTaskSAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n*/\r\nexport type UpDateAPITaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpDateAPITaskType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(task => task.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        //эта моделька улетает на сервер\r\n        const serverModel: UpDateAPITaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            //может быть только одно свойство и мы его берем\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(todolistId, taskId, serverModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskSAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {deleteTasksTC, updateTaskTC} from \"./state/tasks-reducer\";\r\nimport React, {useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksTypeAPI} from \"./api/todolist-api\";\r\n\r\ntype TasksPropsType = {\r\n    task: TasksTypeAPI\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    /*  const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n          let newIsDoneValue = e.currentTarget.checked\r\n          dispatch(changeTaskStatusTC(props.task.id, newIsDoneValue, props.todolistId))\r\n      }*/\r\n    const onChangeStatusHandler =useCallback( (e) => {\r\n        const newStatusValue = e.currentTarget.checked\r\n            dispatch(updateTaskTC(props.task.id, {status: newStatusValue ? TaskStatuses.Completed : TaskStatuses.InProgress}, props.todolistId))\r\n    },[dispatch,props.task.id,  props.task.status, props.todolistId])\r\n    const onChangeTitleHandler = useCallback( (title: string) => {\r\n        debugger\r\n        dispatch(updateTaskTC(props.task.id, {title: title}, props.todolistId));\r\n    },[dispatch,props.task.id, props.todolistId])\r\n\r\n    const removeTask = useCallback(() => {\r\n        const action = deleteTasksTC(props.todolistId, props.task.id)\r\n        dispatch(action)\r\n    }, [dispatch, props.todolistId, props.task.id])\r\n\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox color=\"primary\"\r\n                  onChange={onChangeStatusHandler}\r\n                  checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan title={props.task.title}\r\n                      onChange={onChangeTitleHandler}/>\r\n\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskActionType, addTaskTC, fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TasksTypeAPI} from \"./api/todolist-api\";\r\nimport {fetchTodolistsTC, ToDoListBusinessType} from \"./state/todolists-reducer\";\r\nimport {FilterValuesType} from \"./TodolistsList\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: ToDoListBusinessType\r\n    changeFilter: (id: string, value: FilterValuesType) => void\r\n    onRemoveToDoList: (todoListID: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n//demo если не передали, то по умолчанию false\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    console.log('called App');\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n\r\n\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootState, Array<TasksTypeAPI>>(state => state.tasks[props.todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onRemoveToDoList = () => props.onRemoveToDoList(props.todolist.id);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => props.changeTodoListTitle(props.todolist.id, newTitle), [props.changeTodoListTitle, props.todolist.id]);\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        debugger\r\n        props.changeFilter(props.todolist.id, \"all\")\r\n    }, [props.changeFilter, props.todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"active\"), [props.changeFilter, props.todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.todolist.id, \"completed\"), [props.changeFilter, props.todolist.id]);\r\n\r\n    let allTodolistTasks = tasks\r\n    let tasksForTodolist = allTodolistTasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        const thunk = addTaskTC(title, props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveToDoList} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <ul>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={\"primary\"}\r\n                >All </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeFilterToDoListAC,\r\n    changeTitleTodolistTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    ToDoListBusinessType\r\n} from \"./state/todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport const TodolistsList: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const todoLists = useSelector<AppRootState, Array<ToDoListBusinessType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const onRemoveToDoList = useCallback((todoListId: string) => {\r\n        const thunk = removeTodolistTC(todoListId)\r\n        dispatch(thunk)\r\n\r\n    }, [dispatch])\r\n\r\n\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTitleTodolistTC(id, newTitle))\r\n\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((id: string, value: FilterValuesType) => {\r\n        dispatch(changeFilterToDoListAC(id, value))\r\n\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodolistTC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        //убираем из storybook работу с сервером (после ретурна код не выполняется)\r\n        //а также не посылаем запрос на серв когда чел не залогинен\r\n        if (props.demo || !isLoggedIn) return\r\n        //самая первая загрузка листов\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    //если не залогинен и находишься на странице тудулистов, то редирект на логин\r\n    //делаем в самом конце, чтобы хуки выше не попадали под else(хуки нельзя в условиях и циклах)\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        key={tl.id}\r\n                                        changeFilter={changeFilter}\r\n                                        onRemoveToDoList={onRemoveToDoList}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        demo={props.demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n\r\n                    })\r\n\r\n                }\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootState} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    console.log('fasfsafas')\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n\r\n            if (!values.password) {\r\n\r\n                errors.password = \"Password is required\"\r\n            } else if (values.password.length <= 6) {\r\n                errors.password = 'min 6 symbols'\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            alert(JSON.stringify(values));\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.password\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={formik.handleChange}\r\n                                    checked={formik.values.rememberMe}\r\n                                    name=\"rememberMe\"\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {ErrorSnackbar} from \"./ErrorSneckbar/Errorsneckbar\";\r\nimport {initializeAppTC, ValuesStatusType} from \"./state/app-reducer\";\r\nimport {TodolistsList} from \"./TodolistsList\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./features/Login/login\";\r\nimport {logoutTC} from \"./features/Login/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App = React.memo(({demo = false}: PropsType) => {\r\n        const status = useSelector<AppRootState, ValuesStatusType>((state => state.app.status))\r\n        const isInitialized = useSelector<AppRootState, boolean>((state => state.app.isInitialized))\r\n        const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n        const logoutHandler = useCallback(() => {\r\n            dispatch(logoutTC())\r\n        }, [])\r\n\r\n\r\n        const dispatch = useDispatch()\r\n\r\n\r\n//сработает только 1 раз, поменяет isLoggedIn на true и поэтому перерисуется с крутилки на приложение\r\n        useEffect(() => {\r\n            if (!demo) {\r\n                dispatch(initializeAppTC())\r\n            }\r\n        }, [])\r\n\r\n        //если еще не инициализировалось(не успело отправить get me залогинен ли юзер), то показывать крутилку\r\n        if (!isInitialized) {\r\n            return <div\r\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        }\r\n\r\n\r\n\r\n    return (\r\n                <div className=\"App\">\r\n                    <ErrorSnackbar/>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\">\r\n                                News\r\n                            </Typography>\r\n                            {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                        </Toolbar>\r\n                        {status === 'loading' && <LinearProgress/>}\r\n                    </AppBar>\r\n                    <Container fixed>\r\n                        <Switch>\r\n                            <Route exact path={\"/\"} render={() => < TodolistsList demo={demo}/>}/>\r\n                            <Route path={\"/login\"} render={() => < Login/>}/>\r\n                            <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                            <Redirect from={'*'} to={'/404'}/>\r\n                        </Switch>\r\n                    </Container>\r\n                </div>\r\n        )\r\n    }\r\n)\r\n\r\nexport const App1 = () => (\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>\r\n)\r\n\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\n//создание reducers\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App1} from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n            <App1/>\r\n    </Provider>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}